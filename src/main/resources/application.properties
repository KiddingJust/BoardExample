#컨트롤러가 뷰 이름을 반환할 때 thymeleaf/ 로 시작하면 타임리프로 처리하도록 view-names 지정
#spring.thymeleaf.view-names=thymeleaf/*
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.suffix=.html
#thmeleaf를 사용하다 수정 사항이 생겨 수정을 하면 재시작을 해야함.
#이를 무시하고 브라우저 새로고침 시 수정사항 반영을 위해 cache-false 설정(운영 시에는 true로 해야함)
spring.thymeleaf.cache=false
spring.thymeleaf.check-template-location=true

#mybatis setting
mybatis.type-aliases-package=org.gaiga.test.vo
mybatis.mapper-locations=mybatis/**/*.xml


##DataSource - Before HikariCP 
#spring.datasource.driverClassName=org.mariadb.jdbc.Driver
#spring.datasource.url=jdbc:mariadb://localhost:3306/TESTDB?characterEncoding=utf8&serverTimezone=UTC
#spring.datasource.username=gaigatest
#spring.datasource.password=6330sung

#HikariCP Config 스프링부트 2.x 버전에서는 default로 사용하므로 설정만 해주면 됨. 
#dataSource.driverClasSName이 바뀐 건, log4jdbc 설정 때문. log4jdbc.log4j2.properties 파일 필수
#MariaDB
spring.datasource.driverClassName=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mariadb://testdb.cwk10ozdcecw.ap-northeast-2.rds.amazonaws.com:3306/TESTDB?characterEncoding=utf8&serverTimezone=UTC
#HikariCP
spring.datasource.hikari.username=gaigatest
spring.datasource.hikari.password=6330sung
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.connection-test-query=SELECT 1
#autoCommit (default: true)
#connectionTimeout (default:30000(30초)). 풀에서 커넥션 얻어오기 전까지 기다리는 최대시간. 초과시 SQLException
#validationTimeout (default:5000(5초)). valid쿼리 통해 커넥션 유효한지 검사할 때 사용되는 시간. 
#maximumPoolSize(default:10).풀의 커넥션 수가 옵션 값에 도달하면 idle인 상태는 존재하지 않음.
#idleTimeout (default: 600000(10분)). pool에 일하지 않는 커넥션 유지하는 시간. 

#TRACE < DEBUG < INFO < WARN < ERROR
# -> 위의 순서대로(Trace가 가장 높음) 높은 레벨이며, 설정 레벨 이상의 로그 출력을 무시함. INFO인 경우 TRACE, DEBUG는 무시
#TRACE: Debug보다 훨씬 상세한 내용
#Debug: 프로그램 디버깅 위한 정보
#Info: 상태변경과 같은 정보성 로그
#Warn: 처리 가능한 문제, 향후 시스템 에의 원인이 될 수 있는 경고성메시지
#Error: 요청을 처리하는 중 오류가 발생한 경우 표시 
#아래와 같이 패키지별로 로깅 레벨을 지정할 수도 있음
logging.level.root=info
logging.level.org.gaiga.test=info
logging.level.org.gaiga.test.controller=debug

#JPA 설정
#Dialect 설정
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
##테이블 자동 생성되도록.
##create는 SessionFactory가 시작될 때 기존 테이블을 삭제하고 다시 생성 
spring.jpa.hibernate.ddl-auto=create
##하이버네이트가 실행하는 모든 SQL문을 콘솔에 출력
spring.jpa.hibernate.show_sql=true
##콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현
spring.jpa.properties.hibernate.format_sql=true
##디버깅이 용이하도록 SQL문 이외의 추가적인 정보를 출력
spring.jpa.properties.hibernate.use_sql_comments=true

#스프링부트에서는 PUT, DELETE 요청 시 다음과 같은 코드를 설정해주어야 한다. 
spring.mvc.hiddenmethod.filter.enabled=true

#에러페이지 셋팅
# 오류 응답에 exception의 내용을 포함할지 여부 (TRUE, FALSE)
server.error.include-exception : true
# 오류 응답에 stacktrace 내용을 포함할지 여부 (ALWAYS, NEVER, ON_TRACE_PARAM)
server.error.include-stacktrace : always
# 오류 응답을 처리할 핸들러(ErrorController)의 path
#server.error.path : 
# 브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부 (TRUE, FALSE)
server.error.whitelabel.enabled : true
